#!/bin/bash
#########################################################################################
#########################################################################################
# DEPNotify core logic adopted from Jamf Professional Services DEPNotify_Starter
# script located here. https://github.com/jamf/DEPNotify-Starter
# Modified to allow selected devices to bypass registration and start the setup
#########################################################################################
#########################################################################################

#########################################################################################
# Global Variables
#########################################################################################

# Jamf Pro Server Info 
  if [ -e "/Library/Preferences/com.jamfsoftware.jamf.plist" ]; then
    jamfpro=$(defaults read /Library/Preferences/com.jamfsoftware/jamf.plist jss_url)
  else
    echo "Jamf Pro server not set. Exiting..."
  exit 1
  fi

# Hashed API Info. Parameter 4
  apiauth=$(openssl enc -base64 -d <<< "$6") 
  
# Serial Number
  serial=$(ioreg -rd1 -c IOPlatformExpertDevice | awk -F'"' '/IOPlatformSerialNumber/{print $4}')

# API Asset Tag
  tagxml=$(curl "$jamfpro"JSSResource/computers/serialnumber/"$serial"/subset/general -u "$apiauth" -H "Accept: text/xml")
  assigned_tag=$(echo "$tagxml" | xpath '//general[name="asset_tag"' | awk -F'<value>|</value>' '{print $2}')
  
#	API Cohort "Device Role"
  eaxml=$(curl "$jamfpro"JSSResource/computers/serialnumber/"$serial"/subset/extension_attributes -u "$apiauth" -H "Accept: text/xml")
  assigned_cohort=$(echo "$eaxml" | xpath '//extension_attribute[name="Cohort"' | awk -F'<value>|</value>' '{print $2}')
  
  jamf_binary="/usr/local/bin/jamf"
 
# Hardware Type
  model=$(ioreg -rd1 -c IOPlatformExpertDevice | awk -F'"' '/model/{print $4}')
  
# Naming Prefix
  if [[ "$model" =~ "Book" ]]; then 
    prefix=LUM
  else
    prefix=LU
  fi
  
# Naming Suffix
  suffix=APPLE

# Extension Attribute submission 
   extension_atribute_upload (){
    curl -k -s -u "$apiauth" -X "PUT" "https://$jamfpro/JSSResource/computers/udid/$getudid/subset/extension_attributes" \
      -H "Content-Type: application/xml" \
      -H "Accept: application/xml" \
      -d "<computer><extension_attributes><extension_attribute><id>$eaID</id><name>$eaName</name><type>String</type><value>$value</value></extension_attribute></extension_attributes></computer>"

  }
  
# Caffeinate / No Sleep Configuration
  no_sleep=true

# DEPNotify Variables
  dep_notify_app="/Applications/Utilities/DEPNotify.app"
  dep_notify_log="/var/tmp/depnotify.log"
  dep_notify_debug="/var/tmp/depnotifydebug.log"
  dep_notify_done="/var/tmp/com.depnotify.provisioning.done"
  dep_notify_restart="/var/tmp/com.depnotify.provisioning.restart"

# Testing Mode (true/false)
  testing_mode=true

# Registration Mode
  if [[ "$assignedname" == "" ]] || [[ "$assignedcohort" == "" ]] || [[ "$assignedcohort" == "Departmental" ]] || [[ "$assignedcohort" == "Facstaff" ]]; then registration_enabled=true; fi
  
#########################################################################################
# Global Appearance & Plist Settings
#########################################################################################
# Set Fullscreen
  fullscreen=true

# Plist location
  info_plist_wrapper (){
    dep_notify_user_input_plist="/Users/$current_user/Library/Preferences/menu.nomad.DEPNotifyUserInput.plist"
  }

# Status Text Alignment
  status_text_align="center"

#########################################################################################
# Registration Window Configuration & Appearence 
#########################################################################################

# Banner logo image path
  banner_image_path="/Applications/Utilities/DEPNotify.app/Contents/Resources/longwood_logo.png"

# Banner Main Title
  banner_title="macOS Device Provisioning"

# Text that will display under the banner. User \n for new line.
  main_text='Thank you for selecting Mac at Longwood University! This device is currently being setup to univeristy standards and will \n
  need to complete before you can get started. This process can take a while so please just sit back and enjoy the show! \n
  This device will reboot and return to the login screen when all installs are completed.'

# General Settings
  registration_title="New Device or Reprovisioning Device"
  registration_status="Waiting for device to finish registration"
  registration_button="Register"
  registration_picture="/Applications/Utilities/DEPNotify.app/Contents/Resources/registration_logo.png"
  registration_begin_word="Setting"
  registration_middle_word="to"

# Text Field Input, here we will set the asset tag information that will be used later for naming the device. This info will
# be submitted to Jamf Pro under the "Asset Tag" field. 
  reg_text_label_1="Asset Tag"
  reg_text_label_1_placeholder="01234"
  reg_text_label_1_help_title="Device Fixed Asset Tag"
  reg_text_label_1_help_text="Enter the five digit asset tag that has been assigned to this computer. It is either a blue or read sticker with a barcode \n
  on the back of the device if it is an iMac or the bottom of the device if it is a MacBook. Do not enter in the assumed computer name in this field. \n
  The device will be named in accordence with ITS device naming policy using the asset tag information provided here."

# Text field logic that will be used later on
  reg_text_lable_1_logic (){
    reg_text_lable_1_value=$(defaults read "$dep_notify_user_input_plist" "$reg_text_label_1")
    echo "Status: $registration_begin_word $reg_text_label_1 $registration_middle_word $reg_text_lable_1_value" >> "$dep_notify_log"
      # Submit logic to Jamf Pro
        "$jamf_binary" recon -assetTag "$reg_text_lable_1_value"
        sleep 5
        "$jamf_binary" setComputerName -name "$prefix""$reg_text_lable_1_value""$suffix"
        sleep 5
  }

# Popup Menu Input
  reg_popup_label_1="Device Configuration"
  reg_popup_label_1_options=(
    "Facstaff"
    "Departmental"
  )
  reg_popup_label_1_help_title="Device Configuration"
  reg_popup_label_1_help_text="Select how this device is intended to be configured. Facstaff configurations will be joined to \n
  active directory and recieve additional software. Departmental configurations will not have access to domain resources, will \n
  have a local administrator account created."
  
# Text field logic that will be used later on
  reg_popup_lable_1_logic (){
    reg_popup_lable_1_value=$(defaults read "$dep_notify_user_input_plist" "$reg_popup_label_1")
    echo "Status: $registration_begin_word $reg_popup_label_1 $registration_middle_word $reg_popup_lable_1_value" >> "$dep_notify_log"
      # Submit logic to Jamf Pro
        
  }

#########################################################################################
# Auto Image Window Configuration & Appearence 
#########################################################################################

# Banner logo image path
  banner_image_path="/Applications/Utilities/DEPNotify.app/Contents/Resources/longwood_logo.png"

# Auto Banner Main Title
  auto_banner_title="$device_name"

# Text that will display under the banner. User \n for new line.
  main_text="This Mac is installing all necessary software and running some installation scripts.  \
  Please do not interrupt this process. This may take a few hours to complete; the machine restart \
  automatically when it's finished. \n \n Cohort: $cohort \n \n macOS Version: $OSVERSION"


#########################################################################################
# Let the fun begin! Main logic of the script
#########################################################################################

# Run DEPNotify after the Apple Setup Assistant
  setup_assistant_process=$(pgrep -l "Setup Assistant")
  until [ "$setup_assistant_process" = "" ]; do
    echo "$(date "+%a %h %d %H:%M:%S"): Setup Assistant Still Running. PID $setup_assistant_processS." >> "$dep_notify_debug"
    sleep 1
    setup_assistant_process=$(pgrep -l "Setup Assistant")
  done

# Checking to see if Finder is running befor continuing. DEPNotify must be run in a user session
  finder_process=$(pgrep -l "Finder")
  until [ "$finder_process" != "" ]; do
    echo "$(date "+%a %h %d %H:%M:%S"): Finder process not found. Assuming device is at login screen." >> "$dep_notify_debug"
    sleep 1
    finder_process=$(pgrep -l "Finder")
  done

# After Apple Setup is completed. Safe to grab the current user
  current_user=$(/usr/bin/python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");')
  echo "$(date "+%a %h %d %H:%M:%S"): Current user set to $current_user." >> "$dep_notify_debug"

# Determine if device is known or unknown or if it can autostart configuration. This info was pulled earlier from Jamf Pro.
  if [ $registration_enabled= true ]; then
  
    # Device is unknown to Jamf Pro or needs to be reprovisioned...

    # Setting custom image if specified
      if [ "$banner_image_path" != "" ]; then  echo "Command: Image: $banner_image_path" >> "$dep_notify_log"; fi

    # Setting custom title if specified
      if [ "$banner_title" != "" ]; then echo "Command: MainTitle: $banner_title" >> "$dep_notify_log"; fi

    # Setting custom main text if specified
      if [ "$main_text" != "" ]; then echo "Command: MainText: $main_text" >> "$dep_notify_log"; fi

    # Calling function to set the INFO_PLIST_PATH
      info_plist_wrapper

    # The plist information below
      dep_notify_config_plist="/Users/$current_user/Library/Preferences/menu.nomad.DEPNotify.plist"

    # Setting default path to the plist which stores all the user completed info
      defaults write "$dep_notify_config_plist" pathToPlistFile "$dep_notify_user_input_plist"

    # Setting status text alignment
      defaults write "$dep_notify_config_plist" statusTextAlignment "$status_text_align"
    
    # Registration Plist Configuration
     dep_notify_register_done="/var/tmp/com.depnotify.registration.done"
        
    # Main Window Text Configuration
      defaults write "$dep_notify_config_plist" registrationMainTitle "$registration_title"
      defaults write "$dep_notify_config_plist" registrationButtonLabel "$registration_button"
      defaults write "$dep_notify_config_plist" registrationPicturePath "$banner_image_path"
    
    # First Text Box Configuration
      defaults write "$dep_notify_config_plist" textField1Label "$reg_text_label_1"
      defaults write "$dep_notify_config_plist" textField1Placeholder "$reg_text_label_1_placeholder"
      defaults write "$dep_notify_config_plist" textField1Bubble -array-add "$reg_text_label_1_help_title"
      defaults write "$dep_notify_config_plist" textField1Bubble -array-add "$reg_text_label_1_help_text"
      
    # Popup 1
      defaults write "$dep_notify_config_plist" popupButton1Label "$reg_popup_label_1"
      defaults write "$dep_notify_config_plist" popupMenu1Bubble -array-add "$reg_popup_label_1_help_title"
      defaults write "$dep_notify_config_plist" popupMenu1Bubble -array-add "$reg_text_label_1_help_text"
      for reg_popup_label_1_options in "${reg_popup_label_1_options[@]}"; do
        defaults write "$dep_notify_config_plist" popupButton1Content -array-add "$reg_popup_label_1_options"
      done

  else
      
      # Device is known to Jamf Pro and does not need to be reprovisioned, ie. classroom or loaner device.
      
      # Variables from Jamf Pro EAs lookup
      set_computer_name=$assignedname
      cohort=$assignedcohort 
